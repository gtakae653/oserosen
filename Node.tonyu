function allConnected(lineName,prevNode){
    var del=0;
    var keep;
    var list=[];
    for(n of all(Node)){
        if(isConnected(n,lineName)){
            list.push(n);
        }
        if(n.name.indexOf("point") > -1 && $stations[n.name].nexts[1] == prevNode){
            keep = $stations[n.name].nexts[2];
            $stations[n.name].nexts.pop();
            del=2;
        }
        if(n.name.indexOf("point") > -1 && $stations[n.name].nexts[2] == prevNode){
            keep = $stations[n.name].nexts[1];
            //print(keep);
            $stations[n.name].nexts.splice(1,1);
            //print(keep,$stations[n.name].nexts);
            del=1;
        }
    }
    return list;
    print("bbb");
    if(del == 2){
        $stations[n.name].nexts.push(keep);
        //print(keep,del);
    }else  if(del == 1){
        $stations[n.name].nexts.splice(1,0,keep);
        //print(keep,del);
    }else{
        
    }
    del = 0;
    
    /*全てのNodeを調査して、
    調査した中にisConnectedに渡した駅のnextsに含まれるものがあればそれを返す*/
}

function isConnected(n,lineName){
    if($stations[name].nexts.indexOf(n.name) > -1 && n.isLineOf(lineName)){
        return true;
    }
    if(!(lineName) && $stations[name].nexts.indexOf(n.name) > -1){
        return true;
    }
}

function isLineOf(lineName){//駅名がlineNameかを判定する関数
    var station=$stations[name];//駅名から駅情報を取り出す
    if(!(station)){
        throw new Error(name+"is not found");
    }
    var line = station.lines;//↑のstationの中のlinesの情報をlineに格納
    if(line.indexOf(lineName) > -1){
        return true;
    }else{
        return false;
    }
}

scaleX=0.7;
alpha=180;




