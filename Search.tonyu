/*
分岐器の向きまで考慮する？
*/

//direction　下り　1　上り　0
function searchNextStation(stationName,direction){
    var station=$stations[stationName];//駅名から駅情報を取り出す
    var nextst = station.nexts;//次の駅名
    f=nextst.filter(isLineOf);//fはindexOfで判定した駅の配列
    //print(lineName,stationName,f);
    if(f.length > 2){
        /*
        isTerminalは不要？(3方向以上の分岐駅は終点にはならない...？)
        */
        var z=[];
        for(var i=0;i<f.length;i++){
            nextDirection = (searchDirection(f[i],stationName));
            
            var station=$stations[stationName];//駅名から駅情報を取り出す
            var nextst = station.nexts;//次の駅名
            f=nextst.filter(isLineOf);//fはindexOfで判定した駅の配列
            
            if(nextDirection == direction){
                z.push(f[i]);
                //print(z[0]+"   "+z[1]+"   "+direction);
            }
        }
        return z;//2駅以上returnしなければならない場合がある
        
        
    }else{
        a = isTerminal(stationName);
        if(a==0){//終点ではないなら
            return f[direction];
        }else if(a==1 && direction==1){//上りの終点かつ出力方向が下りなら
            return f[0];//次の駅を返す
        }else if(a==1 && direction==0){//上りの終点かつ出力方向が上りなら
            return null;
        }else if(a==2 && direction==1){//下りの終点かつ出力方向が下りなら
            return null;
        }else{//下りの終点かつ出力方向が上りなら
            return f[0];//次の駅を返す
        }
    }
}

/*導入すべき処理？
if(方面の違う && 既出ではない駅(f[2]など)があるならば){
    その駅(支線の駅を想定)を出力する
}
*/

function searchDirection(stationName1,stationName2){
    var station=$stations[stationName1];//駅名から駅情報を取り出す
    var nextst = station.nexts;//次の駅名
    f=nextst.filter(isLineOf);//fはindexOfで判定した駅の配列
    
    if(f.indexOf(stationName2) > -1){//f(次の駅)の中にstationaName2があるか判定
        num = f.indexOf(stationName2); //あったなら、stationNameがnextsの何番目にあるか判定
        if(num == 0){//stationNameが0番目にあったら
            //次の駅が３つあったら使えない(鶴見線とか？)
            return 1;//下り
        }else{
            return 0;//上り
        }
    }
}


function isLineOf(stationName){//駅名がlineNameかを判定する関数
    var station=$stations[stationName];//駅名から駅情報を取り出す
    var line = station.lines;//↑のstationの中のlinesの情報をlineに格納
    if(line.indexOf(lineName) > -1){
        return true;
    }else{
        return false;
    }
}

function isTerminal(stationName){//次の駅が１駅しか無いことを利用した終点の判定
    var station=$stations[stationName];//駅名から駅情報を取り出す
    var nextst = station.nexts;//次の駅名
    f=nextst.filter(isLineOf);//fはindexOfで判定した駅の配列
    
    if(f.length == 1){//終点の場合(nextsに１つしかない場合)
        var ns = $stations[f[0]];
        n = ns.nexts;
        m=n.filter(isLineOf);//mは終点の次の駅のnextsを路線でfilterした後の配列
        
        if(stationName == m[0]){
            return 1;//上り終点
        }else if(stationName == m[1]){
            return 2;//下り終点
        }else{
            //起こり得ないはず
            //西船橋を京葉線の支線部終点として扱うなら...？nexts[市川塩浜、南船橋]
        }
    }else{
        return 0;//終点ではない
    }
}

function searchOwner(stationName){//stationNameのownerを調べる
    if($owner[stationName]){
        var staown = $owner[stationName];
        var owner = staown.owner;
        return owner;
    }
}

$p=0;//updateOwnerで使用する、分岐駅を全て調査するための変数
function updateOwner(stationName,endStation,direction){
    for(var i=0;i<100;i++){//無限ループに頼るのはやめるべき
        if(st == endStation){
            if($p != 0 && savest.length != $point){
                stationName = savest[$p];
                $p++;
                continue;
            }
            break;
        }
        var st = (searchNextStation(stationName,direction));
        
        var array = Array.isArray(st);
        if(array == false){//stがfalse(配列ではないなら)
            
            if(! $owner[st]){
                $owner[st]={owner:0};
            }
            $owner[st].owner = $turn;
            stationName = st;
        }else{
            savest = st;//st[]を保存するための配列
            if(! $owner[st[$p]]){
                $owner[st[$p]]={owner:0};
            }
            $owner[st[$p]].owner = $turn;
            stationName = savest[$p];
            $p++;
        }
    }
}

s = stationName;//Mainから渡された駅名
so = (searchOwner(stationName));//Mainで押された駅のowner
$point=0;//分岐駅ですべてを調査するために必要な変数
print("");

for(i=0;i<50;i++){//上り方面用
    //print(stationName);
    end = (isTerminal(stationName));
    if(end == 1){//上り終点なら
        if($point != 0 && savestation.length != $point){
            stationName = savestation[$point];
            $point++;
            continue;
        }
        break;
    }
    
    //print(isTerminal(stationName));//終点駅の方向確認
    sta = (searchNextStation(stationName,0));
    var array = Array.isArray(sta);
    if(array == false){
        a = (searchOwner(sta));
        if(a == so){
            o = (updateOwner(s,sta,0));
            break;
        }
        stationName = sta;
    }else{
        savestation = sta;//sta[]を保存するための配列
        stationName = savestation[$point];
        $point++;
    }
}

//起点駅　s　　終端駅　sta

print("");
stationName = s;//上り方面の処理でstationNameを上書きされてしまうため

for(i=0;i<5;i++){//下り方面用
    end = (isTerminal(stationName));
    if(end == 2){//下り終点なら
        if($point != 0 && savestation.length != $point){
            stationName = savestation[$point];
            $point++;
            continue;
        }
        break;
    }
    //print(isTerminal(stationName));//終点駅の方向確認
    sta = (searchNextStation(stationName,1));
    var array = Array.isArray(sta);
    if(array == false){
        
        a = (searchOwner(sta));
        if(a == so){
            o = (updateOwner(s,sta,1));
            break;
        }
        stationName = sta;
    }else{
        savestation = sta;//sta[]を保存するための配列
        stationName = savestation[$point];
        $point++;
    }
}



fireEvent("complete");
