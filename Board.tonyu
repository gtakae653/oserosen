"field strict";
var turn;               //誰のターンか
var ready;              //探索中か否か
var onReady;            //ready=trueになったら呼ばれる
var error;
var diceNum;            //ダイスの出目
var turnCount;          //何周したか
var prevMyStation=[];   //各プレイヤーの１手前にどこを取ったか(ボタン表示用)
var selected;
var choice;             //何文字の駅を選べばいいか(テキスト表示用)
var owner;              //誰が保持しているか
var gameConfig;         //プレイヤー数、終了する指定ターン数
var getStation;         //prev.turnの人が取った駅
var prev;               //前のボードの情報
var gameOver;
var attack;
var lost;
var attackChance;
var prevPlayer;
var message1 = "塗り替える駅を選んでください";
var message2 = "塗り替えられる駅が存在しませんでした";

function clicked(b){
    var curHotSpring=b.stext.indexOf("温泉")>-1;
    var nb;
    nb = new Board{owner: Object.assign({}, owner), gameConfig,prev:this ,turnCount:turnCount};
    if(gameConfig.replay==true){
        new MapScroll{x:$name2Node[b.stext].x,y:$name2Node[b.stext].y,scale:$scale};
    }
    if(attack){//本当は奪取処理をした後に消したい(消えない)
        attack.die();
    }
    
    if(lost){
        lost.die();
    }
    all(Path).die();
    
    //温泉駅を取った次のボードで実行したい処理
    if(attackChance){
        if(nb.owner[b.stext] && nb.owner[b.stext].owner != turn){
            nb.owner[b.stext].owner = turn;
            if(gameConfig.replay == false){
                var attackLog = new CreateFile{attackedStation:b.stext,attackedPlayer:turn,attacked:"attacked"};
            }
                
            paint(b);//色の変更
            setNextTurn(nb);//ターン変更
                
            $main.colorCount();
            if(attack){
                attack.die();
            }
            nb.ready=true;
            if(onReady) onReady();
            return nb;
        }else{
            if(attack){
                attack.die();
            }
            nb.error = "塗り替え可能な駅ではありません";
            nb.attackChance = true;
            nb.ready = true;
            if(onReady) onReady();
            return nb;
        }
    }
    
    
    if(gameConfig.debug == true || gameConfig.replay == true || $main.namelengthComparison(b.text.length,diceNum)){
        nb.getStation = b.stext;//次のボードのgetStationに入れる駅の名前
        
        if(! nb.owner[b.stext]){//ownerに押された駅が無かったら
            nb.owner[b.stext]={name:b.stext,owner:turn};//その駅をownerに数値turnで追加する
            owner[b.stext]={name:b.stext,owner:turn};//追記
            var lines = $stations[b.stext].lines;
            var count = lines.length;
            for (var line of lines) \(line){
                var s=new Searcher{from:$name2Node[b.stext],current:$name2Node[b.stext],lineName:line,owner:nb.owner[b.stext].owner, path:new Path,board:this};
                s.on("result") \(paths) {
                    if(line==="山手線" || line==="大阪環状線"){
                        if(paths[1]){
                            if(paths[0].nodes.length == paths[1].nodes.length){
                            }else if(paths[0].nodes.length > paths[1].nodes.length){
                                paths.splice(0,1);
                            }else{
                                paths.splice(1,1);
                            }
                        }
                    }
                    count--;
                    for (var path of paths) {
                        for(var node of path.nodes){
                            if(!(nb.owner[node.name]) || nb.owner[node.name].owner != turn){
                                if(node.name.indexOf("point") > -1){
                                            //pointオブジェクトは弾く
                                }else{
                                    nb.owner[node.name] = {owner:turn};
                                }
                            }
                                    
                        }
                                
                        for (var b1 of all(Button)) {
                            if(nb.owner[b1.stext]){
                                nb.paint(b1);//色の変更
                            }
                        }
                                
                    }
                            
                    if(count == 0){
                        if(curHotSpring){//選んだのが温泉駅だったら
                            if(nb.enemyHasStation(turn)){
                                if(choice){
                                    choice.die();
                                }
                                if(gameConfig.replay == false){
                                    new PopupLabel{x:0,y:70,align:"left",fillStyle:"Black",text:"塗り替える駅を選んでください"};
                                }
                                nb.turn = turn;
                                nb.turnCount = turnCount;
                                nb.ready = true;
                                if(onReady) onReady();
                                nb.selected = b.stext;
                                prevMyStation[turn-1] = b.stext;
                                nb.prevMyStation = prevMyStation;
                                $main.colorCount();
                                nb.prevPlayer = turn;
                                nb.attackChance = true;
                                return nb;
                            }else{
                                new PopupLabel{x:0,y:70,align:"left",fillStyle:"Black",text:"塗り替えられる駅が存在しませんでした"};
                            }
                                
                        }
                                
                        nb.selected = b.stext;
                        prevMyStation[turn-1] = b.stext;
                        nb.prevMyStation = prevMyStation;
                        $main.colorCount();
                        nb.prevPlayer = turn;
                                
                        paint(b);//色の変更
                        setNextTurn(nb);//ターン変更
   
                        nb.diceNum = $main.dice();
                        nb.ready=true;
                        if(onReady) onReady();
                    }
                            
                    if(gameConfig.limTurn && (gameConfig.limTurn)-0 === turnCount){//ゲーム終了処理
                        nb.gameOver=true;
                                //loadPage(GameSet);
                    }
                            
                };
            }(line);
                    
            paint(b);//色の変更
                
        }else{//すでに取られている駅を押した場合
            nb.error = "その駅は既に取られています";
            nb.ready=true;
            if(onReady) onReady();
            return nb;
        }
    }else{//文字数と一致した駅が選ばれなかった場合
        nb.error = "指定された文字数と一致した駅を選んでください";
        nb.ready=true;
        if(onReady) onReady();
        return nb;
    }
    return nb;
    //$rsta = residualStation();
}


function setNextTurn(nb) {
    if(turn == gameConfig.player){
        nb.turn = 1;
        nb.turnCount = turnCount + 1;
    }else{
        nb.turn = turn+1;
        nb.turnCount = turnCount;
    }
} 

function paint(b) {
    if(owner[b.stext].owner==1){
        b.fillStyle = new Color("red");
    }else if(owner[b.stext].owner==2){
        b.fillStyle = new Color("cyan");
    }else if(owner[b.stext].owner==3){
        b.fillStyle = new Color("yellow");
    }else{
        b.fillStyle = new Color("green");
    }
}

function enemyHasStation(turn){
    var enemyStation = false;
    for(var b2 in owner){
        if(owner[b2].owner != turn){
            enemyStation = true;
            break;
        }
    }
    return enemyStation;
}
