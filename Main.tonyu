$Screen.setBGColor("white");
$main=this;
new Lines;//路線と駅のデータ
update();

new StationPlace;//各駅の座標のデータ
update();
new MapScroll{x:0,y:0,scale:1};

/*
new Prefectural;
update();
for(var p of $pre){
    new Label{x:$pre[p].x*$pixelPerDegree,y:$pre[p].y*$pixelPerDegree,text:$pre[p].name,size:500,fillStyle:"black"};
}
*/

$prevMyStation = [];
$search = new Button{top:10,left:380,width:80,height:30,text:"検索",onClick:click};

boardPrepared = false;//全ての駅のボタンとノードの配置が完了したらtrue
nextPlayPrepared = true;//探索中はfalse
searchPrepared = true;//検索ボタンが押されたらfalse
hotSpring = false;//温泉駅が選択されたらtrue

$owner={};
$turn = 1;

new Label{x:105, y:10,fillStyle:"Black", template:"画面の縮小:bキー　拡大:aキー　標準:cキー"};


loading = new Label{x:50, y:450,fillStyle:"Black", template:"駅生成中..."};

$name2Button={};
for(i=0;i<$stationPlace.length;i++){//駅名を表示する
    sta = new SButton{left:$stationPlace[i].x,top:$stationPlace[i].y,width:40,height:30,text:$stationPlace[i].name.replace(/\(.*/,""),stext:$stationPlace[i].name,
    fillStyle:"white",layer=$mainLayer,onClick:clicked};
    
    $name2Button[$stationPlace[i].name]=sta;
    if(i%10==0){
        update();
    }
}

$Boot.newLimit=10000;
update();
$name2Node={};
for (stationPlace of $stationPlace) {
    $name2Node[stationPlace.name]=new Node{name:stationPlace.name, x:stationPlace.x, y:stationPlace.y, owner:0};   
}
$Boot.newLimit=1000;
update();

for(var stations,z in $stations){//,zはTonyuの仕様の関係で何か渡さなければいけない為
    if(stations.indexOf("point") > -1){
        $name2Node[stations]=new Node{name:stations,x:0,y:0};
    }
}

loading.die();
boardPrepared = true;//全ての駅のボタンとNodeの配置完了


$red=0;
$blue=0;
$yellow=0;
$green=0;
new Label{x:460,y:350,fillStyle:"Black",align:"right",template:"赤=$red駅"};
new Label{x:460,y:370,fillStyle:"Black",align:"right",template:"黄=$yellow駅"};
new Label{x:460,y:390,fillStyle:"Black",align:"right",template:"緑=$green駅"};
new Label{x:460,y:410,fillStyle:"Black",align:"right",template:"青=$blue駅"};


diceArray=[2,2,2,2,2,3,3,3,4,4,5];//ダイスの出目用の配列

//リプレイモードだったら
if($replay){
    $replayStart = new Replay;
    waitEvent($replayStart,"replayEnd");
    $replaySet.die();
    update();
}

if(choice){
    choice.die();
}
start = new Label{x:$screenWidth/2,y:$screenHeight/2-50,size:50,template:"Game Start!!",fillStyle:"red"};
wait(120);
start.die();


$diceNum = dice();
$t = new Label{x:0, y:30,align:"left",fillStyle:"Black",template:"$turn番目の人のターンです"};

if($diceNum < 5){
    choice = new Label{x:0, y:50,align:"left",fillStyle:"Black",template:"$diceNum文字の駅を選んでください"};
}else{
    choice = new Label{x:0, y:50,align:"left",fillStyle:"Black",template:"1文字か$diceNum文字以上の駅を選んでください"};
}
$selected = null;

$prevPlayer = null;
new Label{x:460, y:430,align:"right",fillStyle:"Black",template:"$prevPlayer番目のプレイヤーは"};
new Label{x:460, y:450,align:"right",fillStyle:"Black",template:"$selected駅を取りました"};

while(true) {
    for (var name,n in $name2Node) {
        if (n.name.indexOf("point") < 0){
            continue;
        }
        var sx=0,sy=0;
        
        for (c of n.allConnected()) {
            sx+=c.x;
            sy+=c.y;
        }
        
        n.x=sx/n.allConnected().length;
        n.y=sy/n.allConnected().length;
        
        
    }
    update();
}

function clicked(b){
    if($replay==true){
        new MapScroll{x:$name2Node[b.stext].x,y:$name2Node[b.stext].y,scale:$scale};
    }
    if(lost){
        lost.die();
    }
    if(miss){
        miss.die();
    }
    all(Path).die();
    if(boardPrepared == true && nextPlayPrepared == true && searchPrepared == true){
        nextPlayPrepared = false;
        
        if(hotSpring == true && $owner[b.stext] && $owner[b.stext].owner != $turn){
            if(miss){//missのメッセージが大量にあると消えずに残る
                miss.die();
            }
            $owner[b.stext].owner = $turn;
            if($replay == false){
                attackLog = new CreateFile{attackedStation:b.stext,attackedPlayer:$turn,attack:"attacked"};
            }
            if($turn != $Player){
                if($turn == 1){
                    b.fillStyle = new Color("red");
                }else if($turn == 2){
                    b.fillStyle = new Color("yellow");
                }else{
                    b.fillStyle = new Color("green");
                }
                $turn += 1;
            }else{
                b.fillStyle = new Color("cyan");
                $turn = 1;
            }
            
            colorCount();
            
            if(attack){
                attack.die();
            }
            if($replay==false){
                if($diceNum < 5){
                    choice = new Label{x:0, y:50,align:"left",fillStyle:"Black",template:"$diceNum文字の駅を選んでください"};
                }else{
                    choice = new Label{x:0, y:50,align:"left",fillStyle:"Black",template:"1文字か$diceNum文字以上の駅を選んでください"};
                }
            }
            hotSpring = false;
            nextPlayPrepared = true;
            
            return;
        }else if(hotSpring == true){
            if(attack){
                attack.die();
            }
            miss = new Label{x:0,y:50,align:"left",fillStyle:"Black",text:"その駅は塗り替えられません！"};
            nextPlayPrepared = true;
            return;
        }else{
            
        }
        
        if(hotSpring == false){
            if($debug == true || $replay == true || namelengthComparison(b.text.length,$diceNum)){
                searching = new Label{x:50, y:450,fillStyle:"Black", template:"探索中..."};
                
                if(! $owner[b.stext]){//$ownerに押された駅が無かったら
                    $owner[b.stext]={name:b.stext,owner:$turn};//その駅を$ownerに数値turnで追加する
                    lines = $stations[b.stext].lines;
                    count = lines.length;
                    for (line of lines) \(line){
                        s=new Searcher{from:$name2Node[b.stext],current:$name2Node[b.stext],lineName:line,owner:$owner[b.stext].owner, path:new Path,prev:current};
                        s.on("result") \(paths) {
                            if(line==="山手線" || line==="大阪環状線"){
                                if(paths[1]){
                                    if(paths[0].nodes.length == paths[1].nodes.length){
                                    }else if(paths[0].nodes.length > paths[1].nodes.length){
                                        paths.splice(0,1);
                                    }else{
                                        paths.splice(1,1);
                                    }
                                }
                            }
                            count--;
                            for (var path of paths) {
                                for(node of path.nodes){
                                    if(!($owner[node.name]) || $owner[node.name].owner != $turn){
                                        $owner[node.name] = {owner:$turn};
                                    }
                                    
                                }
                                
                                for (var b1 of all(Button)) {
                                    if($owner[b1.stext]){
                                        if($owner[b1.stext].owner==$Player){
                                            b1.fillStyle=new Color("cyan");
                                        }else if($owner[b1.stext].owner==1){
                                            b1.fillStyle=new Color("red");
                                        }else if($owner[b1.stext].owner==2){
                                            b1.fillStyle=new Color("yellow");
                                        }else if($owner[b1.stext].owner==3){
                                            b1.fillStyle=new Color("green");
                                        }else{
                                            print(b1.text);
                                        }
                                        
                                    }
                                }
                                
                            }
                            
                            if(count == 0){
                                
                                if(b.stext.indexOf("温泉") > -1){
                                    if($replay == false){
                                        log = new CreateFile{logStationName:b.stext,logOwner:$turn};
                                    }
                                    if(attackChance()){
                                        if(hotSpring == false){
                                            hotSpring = true;
                                            if(choice){
                                                choice.die();
                                            }
                                            searching.die();
                                            update();
                                            if($replay == false){
                                                attack = new Label{x:0,y:50,align:"left",fillStyle:"Black",text:"塗り替える駅を選んでください"};
                                            }
                                            nextPlayPrepared = true;
                                        }
                                        return;
                                    }else{
                                        lost = new Label{x:0,y:70,align:"left",fillStyle:"Black",text:"塗り替えられる駅が存在しませんでした"};
                                    }
                                }
                                
                                $selected = b.stext;
                                $prevMyStation[$turn-1] = b.stext;

                                if($replay == false){
                                    log = new CreateFile{logStationName:b.stext,logOwner:$turn};
                                }
                                
                                colorCount();
                                $prevPlayer = $turn;
                                if($turn != $Player){
                                    if($turn == 1){
                                        b.fillStyle = new Color("red");
                                    }else if($turn == 2){
                                        b.fillStyle = new Color("yellow");
                                    }else{
                                        b.fillStyle = new Color("green");
                                    }
                                    $turn += 1;
                                }else{
                                    b.fillStyle = new Color("cyan");
                                    $turn = 1;
                                }
                                
                                
                                $diceNum = dice();
                                nextPlayPrepared = true;
                                searching.die();
                                
                                if(choice){
                                    choice.die();
                                }
                                if($diceNum < 5){
                                    choice = new Label{x:0, y:50,align:"left",fillStyle:"Black",template:"$diceNum文字の駅を選んでください"};
                                }else{
                                    choice = new Label{x:0, y:50,align:"left",fillStyle:"Black",template:"1文字か$diceNum文字以上の駅を選んでください"};
                                }
                            }
                            
                        };
                        $from=null;
                    }(line);
                    
                    if($turn==$Player){
                        b.fillStyle=new Color("cyan");
                    }else if($turn == 1){
                        b.fillStyle=new Color("red");
                    }else if($turn == 2){
                        b.fillStyle=new Color("yellow");
                    }else if($turn == 3){
                        b.fillStyle=new Color("green");
                    }
                }else{
                    if(searching){
                        searching.die();
                    }
                    nextPlayPrepared = true;
                }
            }else{
                if(searching){
                    searching.die();
                }
                nextPlayPrepared = true;
            }
            
            
        }
    }
    
}



function colorCount(){//色別に数える
    $red=0;
    $blue=0;
    $yellow=0;
    $green=0;
    
    for(var o of $name2Node){
        if($owner[o] && $owner[o].owner==$Player){
            $blue++;
        }else if($owner[o] && $owner[o].owner==1){
            $red++;
        }else if($owner[o] && $owner[o].owner==2){
            $yellow++;
        }else if($owner[o] && $owner[o].owner==3){
            $green++;
        }else{
            
        }
    }
}

function getNode(name) {
    var node=$name2Node[name];
    if (!node) throw new Error(name+" is not found");
    return node;
}

function click(a){
    searchPrepared = false;
    if(!(panel)){
        panel=new Panel{fillStyle:"black", x:230, y:250, width:300, height:300, layer:$frontLayer};
    }
    panel.fillRect(0,0,300,300);
    panel.fillText("text",50,50,30,"center");
    
    $prevStation = new Button{top:110,left:140,width:180,height:30,text:$prevMyStation[$turn-1],onClick:searchClicked};
    
    citySta=[$selected,"札幌","函館","秋田","仙台","新潟","東京","名古屋","金沢","大阪","高松(香)","広島","博多","鹿児島"];
    for(var i=0;i<citySta.length;i+=2){
        for(var j=0;j<2;j++){
            if(i==0 && j==0){
                //ここだけ色を変えたい
                $city = new Button{top:i*15+145,left:j*130+100,width:130,height:30,text:citySta[i+j],onClick:searchClicked};
            }else{
                $city = new Button{top:i*15+145,left:j*130+100,width:130,height:30,text:citySta[i+j],onClick:searchClicked};
            }
            

        }
    }
    
    $staBox = new Button{top:360,left:170,width:100,height:30,text:"駅名検索",onClick:\{parallel("iBox");} };
    lineArea = new Button{top:360,left:270,width:100,height:30,text:"路線範囲",onClick:lineAreaTable};
    
    //$が無いとclear関数が上書きされるため２回目に閉じるボタンを押したときエラーになる
    $clear = new Button{top:360,left:90,width:80,height:30,text:"閉じる",onClick:clear};
}

function clear(c){//閉じるが押されたとき
    panel.clearRect(0,0,300,300);
    $frontLayer.all(Button).die();//駅のボタン以外の全てのボタンが消える
    $staBox.die();
    update();
    $search = new Button{top:10,left:380,width:80,height:30,text:"検索",onClick:click};
    searchPrepared = true;
}


function iBox(a){
    $InputBox.open("検索する駅名","","");
    while($InputBox.getStatus()==0){
        staText=$InputBox.getText();
        update();
    }
    
    if($InputBox.getStatus()==1){
        for(var s of $stationPlace){
            if(s.name == staText){
                new MapScroll{x:s.x,y:s.y,scale:$scale};
                clear();
                break;
            }
        }
    }
}

function searchClicked(sc){
    for(var stp of $stationPlace){
        if(stp.name == sc.text){
            new MapScroll{x:stp.x,y:stp.y,scale:$scale};
            break;
        }
    }
}

function lineAreaTable(){
    $WebPage.openNewWindow("http://cho.is.meisei-u.ac.jp/sotu/17j5058/路線範囲.pdf");
}

function dice(){
    var d = rnd(11);
    if(limit(diceArray[d])==false){
        return diceArray[d];
    }else{
        dice();
    }
}

function namelengthComparison(sn,d){
    if(d == 5){//ダイス目が５のとき
        if(sn == 1 || sn >= 5){
            return true;
        }else{
            return false;
        }
    }else{
        if(sn == d){
            return true;
        }else{
            return false;
        }
    }
}

function attackChance(){
    enemyStation = false;
    for(var b2 of all(Button)){
        if($owner[b2.stext] && $owner[b2.stext].owner != $turn){
            enemyStation = true;
            break;
        }
    }
    
    return enemyStation;
}

function limit(dice){
    var stalim=[];
    for(var station of $name2Button){
        if(namelengthComparison(station.replace(/\(.*/,"").length,dice) && !($owner[station])){
            stalim.push(station);
        }
    }
     
    //print(dice,stalim.length);
    if(stalim.length==0){
        return true;
    }else{
        return false;
    }
}


/*
function getStationPlace(n) {
    if (!$stationPlace[n]) throw new Error(n+" not found");
    return $stationPlace[n];
}
*/
