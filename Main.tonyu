$main=this;
new Lines;//路線と駅のデータ
update();

new StationPlace;//各駅の座標のデータ
update();
new MapScroll{x:0,y:0};

$search = new Button{top:10,left:380,width:80,height:30,text:"検索",onClick:click};

boardPreparat = false;//全ての駅のボタンとノードの配置が完了したらtrue
nextPlayPreparat = true;//探索中はfalse
searchPreparat = true;//検索ボタンが押されたらfalse
hotSpring = false;//温泉駅が選択されたらtrue

$owner={};
$turn = 1;
$red=0;
$blue=0;

new Label{x:105, y:10, template:"画面の縮小:bキー　拡大:aキー　標準:cキー"};


loading = new Label{x:50, y:450, template:"駅生成中..."};

$name2Button={};
for(i=0;i<$stationPlace.length;i++){//駅名を表示する
    sta = new SButton{left:$stationPlace[i].x,top:$stationPlace[i].y,width:40,height:30,text:$stationPlace[i].name.replace(/\(.*/,""),stext:$stationPlace[i].name,
    fillStyle:"white",layer=$mainLayer,onClick:clicked};
    
    $name2Button[$stationPlace[i].name]=sta;
    if(i%10==0){
        update();
    }
}

$Boot.newLimit=10000;
update();
$name2Node={};
for (stationPlace of $stationPlace) {
    $name2Node[stationPlace.name]=new Node{name:stationPlace.name, x:stationPlace.x, y:stationPlace.y, owner:0};   
}
$Boot.newLimit=1000;
update();

for(var stations,z in $stations){//,zはTonyuの仕様の関係で何か渡さなければいけない為
    if(stations.indexOf("point") > -1){
        $name2Node[stations]=new Node{name:stations,x:0,y:0};
    }
}

loading.die();
boardPreparat = true;//全ての駅のボタンとNodeの配置完了

//リプレイモードだったら
if($replay){
    new Replay;
}

start = new Label{x:$screenWidth/2,y:$screenHeight/2-50,size:50,template:"Game Start!!",fillStyle:"red"};
wait(120);
start.die();

$diceNum = dice();
$t = new Label{x:0, y:30,align:"left",template:"$turn番目の人のターンです"};

if($diceNum < 5){
    choice = new Label{x:0, y:50,align:"left",template:"$diceNum文字の駅を選んでください"};
}else{
    choice = new Label{x:0, y:50,align:"left",template:"1文字か$diceNum文字以上の駅を選んでください"};
}
$selected = null;
$prevPlayer = null;
new Label{x:460, y:430,align:"right",template:"$prevPlayer番目のプレイヤーは"};
new Label{x:460, y:450,align:"right",template:"$selected駅を取りました"};

while(true) {
    for (var name,n in $name2Node) {
        if (n.name.indexOf("point") < 0){
            continue;
        }
        var sx=0,sy=0;
        
        for (c of n.allConnected()) {
            sx+=c.x;
            sy+=c.y;
        }
        
        n.x=sx/n.allConnected().length;
        n.y=sy/n.allConnected().length;
        
        
    }
    update();
}

function clicked(b){
    if(lost){
        lost.die();
    }
    all(Path).die();
    if(boardPreparat == true && nextPlayPreparat == true && searchPreparat == true){
        nextPlayPreparat = false;
        
        if(hotSpring == true && $owner[b.stext] && $owner[b.stext].owner != $turn){
            if(miss){//missのメッセージが大量にあると消えずに残る
                miss.die();
            }
            $owner[b.stext].owner = $turn;
            attackLog = new CreateFile{attackedStation:b.stext,attackedPlayer:$turn,attack:"attacked"};
            if($turn != $Player){
                if($turn == 1){
                    b.fillStyle = new Color("red");
                }else if($turn == 2){
                    b.fillStyle = new Color("yellow");
                }else{
                    b.fillStyle = new Color("green");
                }
                $turn = $turn+1;
            }else{
                b.fillStyle = new Color("blue");
                $turn = 1;
            }
            update();
            
            attack.die();
            if($diceNum < 5){
                choice = new Label{x:0, y:50,align:"left",template:"$diceNum文字の駅を選んでください"};
            }else{
                choice = new Label{x:0, y:50,align:"left",template:"1文字か$diceNum文字以上の駅を選んでください"};
            }
            hotSpring = false;
            nextPlayPreparat = true;
            return;
        }else if(hotSpring == true){
            if(attack){
                attack.die();
            }
            miss = new Label{x:0,y:50,align:"left",text:"その駅は塗り替えられません！"};
            nextPlayPreparat = true;
            return;
        }else{
            
        }
        
        if(hotSpring == false){
            //if(namelengthComparison(b.stext.length,$diceNum)){
            searching = new Label{x:50, y:450, template:"探索中..."};
                
            if(! $owner[b.stext]){//$ownerに押された駅が無かったら
                $owner[b.stext]={name:b.stext,owner:$turn};//その駅を$ownerに数値turnで追加する
                    //colorCount($owner[b.stext]);
                    
                lines = $stations[b.stext].lines;
                count = lines.length;
                for (line of lines){
                    s=new Searcher{from:$name2Node[b.stext],current:$name2Node[b.stext],lineName:line,owner:$owner[b.stext].owner, path:new Path,prev:current};
                    s.on("result") \(paths) {
                        if(lines.indexOf("山手線") > -1 || lines.indexOf("大阪環状線") > -1 ){
                            if(paths[1]){
                                if(paths[0].nodes.length == paths[1].nodes.length){
                                }else if(paths[0].nodes.length > paths[1].nodes.length){
                                    paths.splice(0,1);
                                }else{
                                    paths.splice(1,1);
                                }
                            }
                        }
                        count--;
                        for (var path of paths) {
                            for(node of path.nodes){
                                if(!($owner[node.name]) || $owner[node.name].owner != $turn){
                                    $owner[node.name] = {owner:$turn};
                                }
                                    
                            }
                                
                            for (var b1 of all(Button)) {
                                if($owner[b1.stext]){
                                    if($owner[b1.stext].owner==$Player){
                                        b1.fillStyle=new Color("blue");
                                    }else if($owner[b1.stext].owner==1){
                                        b1.fillStyle=new Color("red");
                                    }else if($owner[b1.stext].owner==2){
                                        b1.fillStyle=new Color("yellow");
                                    }else if($owner[b1.stext].owner==3){
                                        b1.fillStyle=new Color("green");
                                    }else{
                                        print("????");
                                    }
                                        
                                }
                            }
                                
                        }
                            
                        if(count == 0){
                                
                            if(b.stext.indexOf("温泉") > -1){
                                log = new CreateFile{logStationName:b.stext,logOwner:$turn};
                                if(attackChance()){
                                    if(hotSpring == false){
                                        hotSpring = true;
                                        choice.die();
                                        searching.die();
                                        update();
                                        attack = new Label{x:0,y:50,align:"left",text:"塗り替える駅を選んでください"};
                                        nextPlayPreparat = true;
                                    }
                                    return;
                                }else{
                                    lost = new Label{x:0,y:70,align:"left",text:"塗り替えられる駅が存在しませんでした"};
                                }
                            }
                                
                            $selected = b.text;//stextにはしなくて良い
                            log = new CreateFile{logStationName:b.stext,logOwner:$turn};
                            $prevPlayer = $turn;
                            if($turn != $Player){
                                if($turn == 1){
                                    b.fillStyle = new Color("red");
                                }else if($turn == 2){
                                    b.fillStyle = new Color("yellow");
                                }else{
                                    b.fillStyle = new Color("green");
                                }
                                $turn = $turn+1;
                            }else{
                                b.fillStyle = new Color("blue");
                                $turn = 1;
                            }
                            $diceNum = dice();
                            nextPlayPreparat = true;
                            searching.die();
                        }
                            
                    };
                    $from=null;
                }
                    
                if($turn==$Player){
                    b.fillStyle=new Color("blue");
                }else if($turn == 1){
                    b.fillStyle=new Color("red");
                }else if($turn == 2){
                    b.fillStyle=new Color("yellow");
                }else if($turn == 3){
                    b.fillStyle=new Color("green");
                }
            }
            //}else{
                //nextPlayPreparat = true;
            //}
        }
    }
    
}



function colorCount(s){//色別に数える
    $red=0;
    $blue=0;
    for(var s in $owner){
        if($owner[s].owner==1){
            $red++;
        }else{
            $blue++;
        }
    }
}

function getNode(name) {
    var node=$name2Node[name];
    if (!node) throw new Error(name+" is not found");
    return node;
}

function click(a){//路線の検索ボタンが押された後、閉じるが押されたとき
    searchPreparat = false;
    panel=new Panel{fillStyle:"white", x:230, y:250, width:300, height:300, layer:$frontLayer};
    panel.fillRect(0,0,300,300);
    panel.fillText("text",50,50,30,"center");
    
    $prevStation = new Button{top:110,left:140,width:180,height:30,text:$selected,onClick:searchClicked};
    
    citySta=["札幌","函館","仙台","新潟","東京","名古屋","大阪","高松","広島","博多"];
    for(var i=0;i<citySta.length;i+=2){
        for(var j=0;j<2;j++){
            $city = new Button{top:i*15+160,left:j*130+100,width:130,height:30,text:citySta[i+j],onClick:searchClicked};
        }
    }
    
    
    
    //$が無いとclear関数が上書きされるため２回目に閉じるボタンを押すとエラーになる
    $clear = new Button{top:360,left:90,width:80,height:30,text:"閉じる",onClick:clear};
}

function clear(c){//閉じるが押されたとき
    panel.clearRect(0,0,300,300);
    $frontLayer.all(Button).die();//駅のボタン以外の全てのボタンが消える
    update();
    $search = new Button{top:10,left:380,width:80,height:30,text:"検索",onClick:click};
    searchPreparat = true;
    
}

function searchClicked(sc){
    for(var stp of $stationPlace){
        if(stp.name == sc.text){
            new MapScroll{x:stp.x,y:stp.y};
            break;
        }
    }
}

function dice(){
    return rnd(4)+2;
}

function namelengthComparison(sn,d){
    if(d == 5){//ダイス目が５のとき
        if(sn == 1 || sn >= 5){
            return true;
        }else{
            return false;
        }
    }else{
        if(sn == d){
            return true;
        }else{
            return false;
        }
    }
}

function attackChance(){
    enemyStation = false;
    for(var b2 of all(Button)){
        if($owner[b2.stext] && $owner[b2.stext].owner != $turn){
            enemyStation = true;
            break;
        }
    }
    
    return enemyStation;
}


/*
function getStationPlace(n) {
    if (!$stationPlace[n]) throw new Error(n+" not found");
    return $stationPlace[n];
}
*/

/*
while文にして......
状態管理が必要(例：$searching = true/false)
Name = $InputBox.getText();
if ($InputBox.getStatus()==1 && $searching) {
    //OKが押されたら、getした路線名をindexOfに反映する？
}
*/
