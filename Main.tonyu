"field strict";
$Screen.setBGColor("white");
$main=this;

if($kintetsu==true){
    new KLines;
    update();
}else{
    new Lines;//路線と駅のデータ
    update();
}

new StationPlace;//各駅の座標のデータ
update();
new MapScroll{x:0,y:0,scale:1};

/*
new Prefectural;
update();
for(var p of $pre){
    new Label{x:$pre[p].x*$pixelPerDegree,y:$pre[p].y*$pixelPerDegree,text:$pre[p].name,size:500,fillStyle:"black"};
}
*/

$search = new Button{top:10,left:380,width:80,height:30,text:"検索",onClick:click};

$boardPrepared = false;//全ての駅のボタンとノードの配置が完了したらtrue
var ready = true;//探索中はfalse
$searchPrepared = true;//検索ボタンが押されたらfalse
$hotSpring = false;//温泉駅が選択されたらtrue

var diceArray=[];
if($kintetsu==true){
    diceArray=[2,2,2,2,3,3,3,4,4,4,5,5];
}else{
    diceArray=[2,2,2,2,2,2,3,3,3,4,4,5];//ダイスの出目用の配列
}

$board = new Board{turn: 1, turnCount:1, ready: true,diceNum:dice(),owner:{}, gameConfig: $gameConfig};

new Label{x:0, y:10,align:"left",fillStyle:"Red", template:"描画範囲:bキー 拡大:aキー 標準:cキー 広域:dキー"};

var loading = new Label{x:50, y:450,fillStyle:"Black", template:"駅生成中..."};

$name2Button={};

var sta;
for(var i=0;i<$stationPlace.length;i++){//駅名を表示する
    sta = new SButton{left:$stationPlace[i].x,top:$stationPlace[i].y,width:40,height:30,text:$stationPlace[i].name.replace(/\(.*/,""),stext:$stationPlace[i].name,
    fillStyle:"white",layer=$mainLayer,onClick: sButtonClicked};
    
    $name2Button[$stationPlace[i].name]=sta;
    if(i%10==0){
        update();
    }
}

$Boot.newLimit=10000;
update();
$name2Node={};
var stationPlace;
for (stationPlace of $stationPlace) {
    $name2Node[stationPlace.name]=new Node{name:stationPlace.name, x:stationPlace.x, y:stationPlace.y, owner:0};   
}
$Boot.newLimit=1000;
update();

for(var stations,z in $stations){//,zはTonyuの仕様の関係で何か渡さなければいけない為
    if(stations.indexOf("point") > -1){
        $name2Node[stations]=new Node{name:stations,x:0,y:0};
    }
}


loading.die();
$boardPrepared = true;//全ての駅のボタンとNodeの配置完了


$red=0;
$blue=0;
$yellow=0;
$green=0;

new Label{x:460,y:330,fillStyle:"Black",align:"right",template:"ターン数=$board.turnCount"};
new Label{x:460,y:350,fillStyle:"Black",align:"right",template:"赤=$red駅"};
new Label{x:460,y:370,fillStyle:"Black",align:"right",template:"青=$blue駅"};
new Label{x:460,y:390,fillStyle:"Black",align:"right",template:"黄=$yellow駅"};
new Label{x:460,y:410,fillStyle:"Black",align:"right",template:"緑=$green駅"};

//リプレイモードだったら
if($gameConfig.replay){
    $replayStart = new Replay;
    waitEvent($replayStart,"replayEnd");
    $replaySet.die();
    update();
}

var choice;

var start = new Label{x:$screenWidth/2,y:$screenHeight/2-50,size:50,template:"Game Start!!",fillStyle:"red"};
wait(120);
start.die();
new Label{x:0, y:30,align:"left",fillStyle:"Black",template:"$board.turn番目の人のターンです"};
new Label{x:460, y:430,align:"right",fillStyle:"Black",template:"$board.prevPlayer番目のプレイヤーは"};
new Label{x:460, y:450,align:"right",fillStyle:"Black",template:"$board.selected駅を取りました"};
choice = new Label{x:0, y:50,align:"left",fillStyle:"Black",text:""};
var panel;


while(true) {
    for (var name,n in $name2Node) {
        if (n.name.indexOf("point") < 0){
            continue;
        }
        var sx=0,sy=0;
        
        for (var c of n.allConnected()) {
            sx+=c.x;
            sy+=c.y;
        }
        
        n.x=sx/n.allConnected().length;
        n.y=sy/n.allConnected().length;
    }
    if($board.diceNum == 5){
        choice.text="1文字か "+$board.diceNum+" 文字以上の駅を選んでください";
    }else{
        choice.text=$board.diceNum+" 文字の駅を選んでください";
    }
    update();
}


function sButtonClicked(b) {
    if (!$board.ready) {
        return;
    }
    if(!$boardPrepared){
        return;
    }
    if(!$searchPrepared){
        return;
    }
    if($board.gameOver){
        print("This game is finished!");
        print("Thank you for playing!");
        return;
    }
    var nb=$board.clicked(b);
    //print(nb);
    if (nb.error) {
        print("ERROR");
        //エラーメッセージが表示される
    } else {
        $board=nb;
        var log = new CreateFile{logStationName:$board.getStation,logOwner:$board.prev.turn};//通常プレイ時のログ取得
        if($gameConfig.replay == true){
            var tlog = new CreateTerritoryfile{rsta:$red,ysta:$yellow,gsta:$green,bsta:$blue};
        }
    }
}


function colorCount(){//色別に数える
    $red=0;
    $blue=0;
    $yellow=0;
    $green=0;
    
    for(var o of $name2Node){
        if($board.owner[o] && $board.owner[o].owner==1){
            $red++;
        }else if($board.owner[o] && $board.owner[o].owner==2){
            $blue++;
        }else if($board.owner[o] && $board.owner[o].owner==3){
            $yellow++;
        }else if($board.owner[o] && $board.owner[o].owner==4){
            $green++;
        }
    }
}

function getNode(name) {
    var node=$name2Node[name];
    if (!node) throw new Error(name+" is not found");
    return node;
}

function click(a){
    $searchPrepared = false;
    if(!(panel)){
        panel=new Panel{fillStyle:"black", x:230, y:250, width:300, height:300, layer:$frontLayer};
    }
    panel.fillRect(0,0,300,300);
    
    $prevStation = new Button{top:110,left:140,width:180,height:30,text:$board.prevMyStation[$board.turn-1],onClick:searchClicked};
    
    var citySta;
    if($kintetsu==true){
        citySta=[$board.selected,"近鉄名古屋","大和西大寺","京都","大阪難波","大和八木","古市","吉野","王寺","伊勢中川","賢島","近鉄四日市","尺土","大阪阿部野橋"];
    }else{
        citySta=[$board.selected,"札幌","函館","秋田","仙台","新潟","東京","名古屋","金沢","大阪","高松(香)","広島","博多","鹿児島"];
    }
    for(var i=0;i<citySta.length;i+=2){
        for(var j=0;j<2;j++){
            if(i==0 && j==0){
                //ここだけ色を変えたい
                $city = new Button{top:i*15+145,left:j*130+100,width:130,height:30,text:citySta[i+j],onClick:searchClicked};
            }else{
                $city = new Button{top:i*15+145,left:j*130+100,width:130,height:30,text:citySta[i+j],onClick:searchClicked};
            }
            

        }
    }
    
    var RDice = new Button{top:110,left:330,width:30,height:30,text:"D",onClick:revengeDice};
    
    $staBox = new Button{top:360,left:170,width:100,height:30,text:"駅名検索",onClick:\{parallel("iBox");} };
    var lineArea = new Button{top:360,left:270,width:100,height:30,text:"路線範囲",onClick:lineAreaTable};
    //$resta = new Label{x:250,y:400,fillStyle:"white",template:"残り=$rsta駅"};
    //$が無いとclear関数が上書きされるため２回目に閉じるボタンを押したときエラーになる
    $clear = new Button{top:360,left:90,width:80,height:30,text:"閉じる",onClick:clear};
}

function clear(c){//閉じるが押されたとき
    panel.clearRect(0,0,300,300);
    $frontLayer.all(Button).die();//駅のボタン以外の全てのボタンが消える
    $staBox.die();
    //$resta.die();
    update();
    $search = new Button{top:10,left:380,width:80,height:30,text:"検索",onClick:click};
    $searchPrepared = true;
}


function iBox(a){
    $InputBox.open("検索する駅名","","");
    while($InputBox.getStatus()==0){
        var staText=$InputBox.getText();
        update();
    }
    
    if($InputBox.getStatus()==1){
        for(var s of $stationPlace){
            if(s.name == staText){
                new MapScroll{x:s.x,y:s.y,scale:$scale};
                clear();
                break;
            }
        }
    }
}

function searchClicked(sc){
    for(var stp of $stationPlace){
        if(stp.name == sc.text){
            new MapScroll{x:stp.x,y:stp.y,scale:$scale};
            break;
        }
    }
}

function lineAreaTable(){
    print($kintetsu);
    if($kintetsu==true){
        $WebPage.openNewWindow("http://cho.is.meisei-u.ac.jp/sotu/17j5058/kintetsu_map.pdf");
    }else{
        $WebPage.openNewWindow("http://cho.is.meisei-u.ac.jp/sotu/17j5058/路線範囲.pdf");
    }
}

function dice(){
    var d = rnd(12);
    //if(limit(diceArray[d])==false){
    return diceArray[d];
    //}else{
      //  dice();
    //}
}

function revengeDice(){
    //diceNum = dice();
}

function namelengthComparison(sn,d){
    if(d == 5){//ダイス目が５のとき
        if(sn == 1 || sn >= 5){
            return true;
        }else{
            return false;
        }
    }else{
        if(sn == d){
            return true;
        }else{
            return false;
        }
    }
}



function residualStation(){
    var rs = [];
    for(var station of $name2Node){
        if(!($board.owner[station])){
            rs.push(station);
        }
    }
    print(rs.length);
}

function limit(dice){
    var stalim=[];
    for(var station of $name2Node){
        if(namelengthComparison(station.replace(/\(.*/,"").length,dice) && !($board.owner[station])){
            stalim.push(station);
        }
    }
    
    print(dice,stalim.length);
    /*for(i=0;i<stalim.length;i++){
        print(stalim[i]);
    }*/

    if(stalim.length==0){
        return true;
    }else{
        return false;
    }
}


/*
function getStationPlace(n) {
    if (!$stationPlace[n]) throw new Error(n+" not found");
    return $stationPlace[n];
}
*/
